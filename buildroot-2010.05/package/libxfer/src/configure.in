##########################################################################
#  
#   Copyright (C) 2010 by Amlogic, Inc. All Rights Reserved.
# 
#   Description: the interface of Transfer Module
# 
#   Author: Peifu Jiang
# 
##########################################################################
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.64])
AC_INIT([xfer], [1.0.1], [amlogic.com])
AC_CONFIG_SRCDIR([config.h.in])
AC_CONFIG_HEADERS([config.h])
AM_INIT_AUTOMAKE(xfer,1.0.1)
LT_INIT
AC_CONFIG_MACRO_DIR([m4])

# Checks for programs.
AC_PROG_CC
AC_PROG_LIBTOOL

# Checks for libraries.
AC_PROG_RANLIB
AC_CHECK_LIB([curl], [curl_global_init], HAVE_CURL=yes, HAVE_CURL=no)
#if test "$HAVE_CURL" = "no"; then
#AC_MSG_ERROR([curl is required])
#fi

AC_CHECK_LIB([pthread], [pthread_create], HAVE_PTHREAD=yes,HAVE_PTHREAD=no)
#if test "$HAVE_PTHREAD" = "no"; then
#AC_MSG_ERROR([pthread is required])
#fi

# Checks for header files.
AC_CHECK_HEADERS([fcntl.h malloc.h memory.h stdlib.h string.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_CHECK_FUNCS([memmove memset select strchr strrchr strstr])

# configure for debugging
AC_ARG_ENABLE([debug],
[ --enable-debug     Turn on debugging],
[case "${enableval}" in
  yes) debug=true ;;
  no) debug=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-debug]) ;;
esac],[debug=false])
AM_CONDITIONAL([DEBUG], [test x$debug = xtrue])

# configure for building with libembed_thunder or not
AC_ARG_ENABLE([thunder],
[ --enable-thunder     Build with thunder lib],
[case "${enableval}" in
  yes) thunder=true ;;
  no) thunder=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-thunder]) ;;
esac],[thunder=false])
AM_CONDITIONAL([THUNDER], [test x$thunder = xtrue])

# configure for building with offline demo
AC_ARG_ENABLE([demo],
[ --enable-demo     Build with offline demo],
[case "${enableval}" in
  yes) demo=true ;;
  no) demo=false ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-demo]) ;;
esac],[demo=false])
AM_CONDITIONAL([DEMO], [test x$demo = xtrue])

dnl **********************************************************************
dnl Check for the presence of ZLIB libraries and headers
dnl **********************************************************************

dnl Check for & handle argument to --with-zlib.

_cppflags=$CPPFLAGS
_ldflags=$LDFLAGS
AC_ARG_WITH(zlib,
AC_HELP_STRING([--with-zlib=PATH],[search for zlib in PATH])
AC_HELP_STRING([--without-zlib],[disable use of zlib]),
               [OPT_ZLIB="$withval"])

if test "$OPT_ZLIB" = "no" ; then
    AC_MSG_WARN([zlib disabled])
else
  if test "$OPT_ZLIB" = "yes" ; then
     OPT_ZLIB=""
  fi

  if test -z "$OPT_ZLIB" ; then
    dnl check for the lib first without setting any new path, since many
    dnl people have it in the default path

    AC_CHECK_LIB(z, inflateEnd,
                   dnl libz found, set the variable
                   [HAVE_LIBZ="1"],
                   dnl if no lib found, try /usr/local
                   [OPT_ZLIB="/usr/local"])

  fi

  dnl Add a nonempty path to the compiler flags
  if test -n "$OPT_ZLIB"; then
     CPPFLAGS="$CPPFLAGS -I$OPT_ZLIB/include"
     LDFLAGS="$LDFLAGS -L$OPT_ZLIB/lib$libsuff"
  fi

  AC_CHECK_HEADER(zlib.h,
    [
    dnl zlib.h was found
    HAVE_ZLIB_H="1"
    dnl if the lib wasn't found already, try again with the new paths
    if test "$HAVE_LIBZ" != "1"; then
      AC_CHECK_LIB(z, gzread,
                   [
                   dnl the lib was found!
                   HAVE_LIBZ="1"
                   ],
                   [ CPPFLAGS=$_cppflags
                   LDFLAGS=$_ldflags])
    fi
    ],
    [
      dnl zlib.h was not found, restore the flags
      CPPFLAGS=$_cppflags
      LDFLAGS=$_ldflags]
    )

  if test "$HAVE_LIBZ" = "1" && test "$HAVE_ZLIB_H" != "1"
  then
    AC_MSG_WARN([configure found only the libz lib, not the header file!])
    HAVE_LIBZ=""
  elif test "$HAVE_LIBZ" != "1" && test "$HAVE_ZLIB_H" = "1"
  then
    AC_MSG_WARN([configure found only the libz header file, not the lib!])
  elif test "$HAVE_LIBZ" = "1" && test "$HAVE_ZLIB_H" = "1"
  then
    dnl both header and lib were found!
    AC_SUBST(HAVE_LIBZ)
    AC_DEFINE(HAVE_ZLIB_H, 1, [if you have the zlib.h header file])
    AC_DEFINE(HAVE_LIBZ, 1, [if zlib is available])

    LIBS="$LIBS -lz"

    dnl replace 'HAVE_LIBZ' in the automake makefile.ams
    AMFIXLIB="1"
    AC_MSG_NOTICE([found both libz and libz.h header])
  fi
fi
dnl set variable for use in automakefile(s)
AM_CONDITIONAL(HAVE_LIBZ, test x"$AMFIXLIB" = x1)


AC_CONFIG_FILES([Makefile
                 ixml/Makefile
                 src/Makefile])
AC_OUTPUT
